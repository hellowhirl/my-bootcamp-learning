import React, { Component } from "react";

// Counter class inherits methods from Component class
class Counter extends Component {
  // defining properties in a class: setting them = to an object
  // this state object includes any data that this component needs
  state = {
    count: 0,
    imageUrl: "https://picsum.photos/200"
  };

  styles = {
    fontSize: 30,
    fontWeight: "bold"
  };

  render() {
    // below code was refactored into getBadgeClasses() method - to render a className dynamically
    // let classes = "badge m-2 badge-";
    // classes += this.state.count === 0 ? "warning" : "primary";

    // importing 'React' React.createElement is happening behind the scenes - which helps compile elements
    // "JSX expressions must have one parent element." - which is why standard approach is <div></div>
    // React.createElement('') takes a single argument for type of element we want to create - multiple side by side is not possible
    return (
      // use 'React.Fragment' if we don't want an extra <div> on outside layer - a child from React called 'Fragment'
      // in between {} we can write any JS expression - something that produces a value
      // this.state.count is how we access dynamic property values
      <React.Fragment>
        <span style={this.styles} className={this.getBadgeClasses()}>
          {this.formatCount()}
        </span>
        <button style={{ fontSize: 30 }} className="btn btn-secondary btn-sm">
          increment
        </button>
      </React.Fragment>
    ); // automatic semicolon insertion for 'return' on one line - so we should put parenthesis after return ()
  }

  // best not polute render method, so instead we encapsulate code into separate method
  // always use descriptive neames that determine the intention of the code
  getBadgeClasses() {
    let classes = "badge m-2 badge-"; // includes all the classes that we pass to className
    classes += this.state.count === 0 ? "warning" : "primary"; // if(conditon) then append String a, else append String b
    return classes;
  }
  formatCount() {
    // const x = <h1>Example</h1>; // able to define a constant and set it to a JSX expression - perfectly fine
    const { count } = this.state;
    // return this.state.count === 0 ? "empty" : this.state.count; // this.state.count is repeated - best to use object destrcturing
    // JSX expressions gets compiled to React elements - JSX expressions are just like normal JS objects
    return count === 0 ? <span>Zero</span> : count; // this.state.count is repeated - best to use object destrcturing
  }
}

// code generated by template below - also OK to use
export default Counter;
