Object-oriented Programming

OOP: a programming paradigm centered around objects rather than functions
- it's not a language or tool
- supported by Ruby, JavaScript, Python, Java, C#, and more

- Before OOp there was procedural programming (too much interdepency)

- In OOP we combine a group of related variables and functions into a unit - an object with properties and methods

4 pillars of OOP

Encapsulation
- Combine a group of related variables and functions that operate on them into a unit - an object with properties and methods

Abstraction
- hide details and complexity and show only essentials; reduce complexity + isolate impact of changes

Inheritance
- remove redundant code by defining once in a generic object

Polymorphism
- method behaves differently depending on the object we are referencing; refactor ugly case/switch or if/eles statements


Object Literals

- a function member of an object is refered to as a 'method'
- other members are 'properties' which hold values
- every object created like this comes from the built in Object constructor function: function Object() { }
- other built-in constructors in JS like (new String(), new Boolean(), etc.) but we instead use literal versions

 Factory functions

 - if an object has one or more methods that object 'has behavior'


 - every object in JS has a property called 'constructor' - references the function used to create that object


Functions are Objects

- when we look at 'constructor' method for each object in JavaScript we can see the underlying built-in object that was used to create it
Example: String(), Number(), Function(), Array(), Object(), etc.

- takeaway: functionars are objects

HAMMERING THIS POINT HOME:
// Primitives are copied by their Value
// Objects (Reference Types) are copied by their Reference Types 

- in JS we can add properties to objects whenever we need to, which makes JS powerful and easy to work with
