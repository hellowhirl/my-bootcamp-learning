Object-oriented Programming

OOP: a programming paradigm centered around objects rather than functions
- it's not a language or tool
- supported by Ruby, JavaScript, Python, Java, C#, and more

- Before OOP there was procedural programming (too much interdepency)

- In OOP we combine a group of related variables and functions into a unit - an object with properties and methods

4 pillars of OOP

Encapsulation
- grouping related variables and functions that operate on them into objects - an object with properties and methods

Abstraction
- hide details and complexity and show only essentials; reduce complexity + isolate impact of changes

Inheritance
- remove redundant code by defining once in a generic object

Polymorphism
- method behaves differently depending on the object we are referencing; refactor ugly case/switch or if/eles statements


Object Literals

- a function member of an object is refered to as a 'method'
- other members are 'properties' which hold values
- every object created like this comes from the built in Object constructor function: function Object() { }
- other built-in constructors in JS like (new String(), new Boolean(), etc.) but we instead use literal versions

 Factory functions

 - if an object has one or more methods that object 'has behavior'


 - every object in JS has a property called 'constructor' - references the function used to create that object


Functions are Objects

- when we look at 'constructor' method for each object in JavaScript we can see the underlying built-in object that was used to create it
Example: String(), Number(), Function(), Array(), Object(), etc.

- takeaway: functions are objects

HAMMERING THIS POINT HOME:
// Primitives are copied by their Value
// Objects (Reference Types) are copied by their Reference Types 

- in JS we can add properties to objects whenever we need to, which makes JS powerful and easy to work with

- There are 3 ways to enumerate all members in an object:
    for ( in ) loop
    Object.keys()
    'in' operator

- Abstraction: hide the details, show the essentials (like buttons on a DVD player)
- To apply abstraction we need to hide certain members from the outside

About scope and closure:

scope: 
- determines the accessibility (visibility) of variables.
- it is temporary - variables within a function are created each time new and die when the function ends
- when we have nested functions we create a 'scope chain' - and the variable that is closest to its own scope will be returned

closure: 
- when you have a function it is intrinsically tied to the scope of its parent
- determines what variables will be accessible to an inner function
- remains after function has ended


Classical Inheritance:
- allows an object to take on the properties and methods of another object - makes it easy to reuse code in another part of the application

Typically classes are examplained as below structure:

Base/Super/Parent Class
SHAPE
CIRCLE SQUARE
Derived/Sub/Child Class

IS-A relationship

CIRCLE is a SHAPE


Prototypes and Prototypical Inheritance

Prototype:
- whenever we hear 'prototype', just think of 'parent'
- a prototype is just a parent object of another object. 

Prototypical Inheritance:
- when you access a member (property or method) on an object JS engine looks for that member, starting from itself. 
- if it can't find it then it will walk up the prototype chain until it can find the target member - all the way up to the root object.

'__proto__' has been deprecated and should only be used for troubleshooting problems (never used in our code)

- the root object in JS doesn't have a prototype (parent)


Multilevel inheritance

example with Array object:

______________
| objectBase | : original methods like toString(), .hasOwnProperty(), etc.
``````````````
      ▲
_____________
| arrayBase | : methods like .push(), .splice(), .shift(), etc.
`````````````
      ▲
 ___________
 | myArray | : any methods or properties we define in this object
 ```````````



example with objects that have custom constructors:

______________
| objectBase | : original methods like toString(), .hasOwnProperty(), etc.
``````````````
      ▲
______________
| circleBase | : properties and methods we defined like radius and draw()
``````````````
      ▲
  __________
  | circle | : created after we did 'const circle = new Circle();' - our custom constructor() sets prototype to circleBase
  ``````````

In summary: Objects created by a given constructor will have the same prototype.


by default below properties are set to true:

writable: able to set value or not (false will make it a read-only property)
enumerable: members of object will show up for Object.keys() or not
configurable: able to delete property or not

- constructors also have a 'prototype' property
- .__proto__ and .prototype return the same result

IN SUMMARY:
- when navigating through an object in JS, don't go deeper than what's inside a constructor


Prototype vs Instance members
- we can reference (or call) instance methods from a prototype member
- we can reference (or call) prototype methods from an instance member


WE SHOULD NOT MODIFY (BUILT-IN) OBJECTS THAT WE DON'T OWN IN JAVASCRIPT
OTHER LIBRARIES MAY DEPEND ON THESE BUILT-IN OBJECTS
- don't overwrite methods
- don't add new methods/properties
- don't remove existing methods/properties
❌Array.prototype.shuffle = function() { // ..}

- Our objcts should always be in a valid state (reliable and trustworthy) - that's why we use abstraction
PREMATURE OPTIMIZATION IS THE ROOT OF ALL EVIL

Method overriding: 
- override a method that is defined in the base object (reimplementing a method in a child object)

Polymorphism (poly: many, morph: form)

- Don't overuse Inerhitance - it can make your code complex and fragile
- There is another technique for code reuse called "Composition"

AVOID CREATING INHERITANCE HIERARCHIES - DO NOT GO ABOVE ONE LEVEL

FAVOR COMPOSITION OVER INHERITANCE

- Composition is achieved with Mixins

- it's possible to have a template string inside of another template string
function HtmlSelectELement(items = []) {
  this.render = function() {
    return `
<select>${this.items
      .map(
        item => `
  <option>${item}</option>`
      )
      .join("")}
</select>`;
  };
}

In classical oritented langauge there are 2 types of methods
- Instance methods and Static methods

Static methods: 
- not working with a particular object - we are working a class itself
- utility functions (like Math)


/////////////////
// ES6 Tooling //
/////////////////

Module benfits:
- Increase maintainability (better organized)
- Reuse (throughout an application or different applications)
- Abstract (hide complexity in a module and only expose essentials)

Module formats:
- CommonJS : Node.JS
- ES6 Module (natively supported by JS) : Browser
/////// Don't worry about these ///////
// - AMD (Asyncronous Module Definition) : Browser
// - UMD (Universal Module Definition) : Browser /Node.JS


When using ES6 we need to use 2 tools: a transpiler and a bundler

Babel:
- a transpiler: translater and compiler
- a tool we give our modern JS code and it turns it into browser readable JS

Webpack:
- a module bundler: combines all our js files into one file - a bundler
- minifies and uglifies code


npm:
- tool we use to install 3rd party libraries and tools


Workflow for Webpack:

Benefit of using webpack-cli: 
- we don't have to manually install babel packages
- downloads other libraries and tools that we need
- able to bundle CSS (as well as JS)

command: 
webpack-cli init
result: 
installs packages (webpack-cli, uglify)s, babel-cre, babel-loader, babel-preset-env, webpack (library itself))

command: 
npm init --yes
result: 
creates 'package.json' file
detail: in 'scripts' section we can add a new command 'build' and set to 'webpack'

command: 
npm run build
result: 
creates a bundle (main.bundles.js) from files in /src folder
detail:
webpack runs our code through babel and converts to ES5 JS code and puts in 1 minified file

NEXT:
in 'index.html' change script 'src' to 'dist/main.bundle.js'

FINALLY:
Go live with modules in project

OPTIMIZE:
in 'scripts' change to 'webpack -w' for 'build' script