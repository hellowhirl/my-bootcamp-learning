
MySQL notes 1:

DBMS
Relational database
MySQL Workbench 

SELECT
FROM
WHERE
AS
DISTINCT


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

MySQL notes 2:

; ends a statement like USE

Only give a prefix to a table if it is not a part of current DB

JOIN for multiple tables, ON condition = condition
JOIN payment_methods pm ON  p.payment_method = pm.payment_method_id

composite primary key

Be aware of implicit joined syntax (using WHERE, better to use JOIN ON

(INNER) JOIN vs (OUTER) JOIN

LEFT JOIN, RIGHT JOIN


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

MySQL notes 3:

avoid using RIGHT JOIN, use LEFT JOIN instead 

Self OUTER JOIN also possible 

USING (when column name is exactly the same)

*NATURAL JOIN *(guessing is not good, so not recommended)

CROSS JOIN (combine results from multiple queries)


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

MySQL notes 4:

UNION

Database design mode: shows attributes of each column

VARCHAR is less wasteful and is usually preferred to CHAR

PK: Primary Key

NN: Not Nullable (required)

AI: Auto Increment (MySQL will generate new value by adding 1 for each new entry)

Default: value that MySQL will insert if query uses DEFAULT

DEFAULT is preferred to writing explicit value 

‘Strings’ and ‘DATE-01-15’ should be in quotes

INSERT INTO, values can be listed in any order, as long as column name is correct 

VALUES (  ,   ,  )


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

MySQL notes 5:

inserting multiple values:
INSERT INTO shippers (name)
VALUES ('Shipper1'), ('Shipper2'), ('Shipper3')

INSERT INTO products (name, quantity_in_stock, unit_price)
VALUES ('1', '1','1'), ('2', '2', '2'), ('3', '3', '3')

even after data is deleted, MySQL will remember last id for AI values

VALUES
(LAST_INSERT_ID(), 1, 2)

CREATE TABLE table_name AS
SELECT


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

MySQL Notes 6:

UPDATE: update 1 or more records in a table

SET: specify new value for 1 or more columns

To update/set single rows: 
WHERE client_id = 3
To update/set multiple rows:
WHERE client_id IN (3, 4, 5)

Replace = with IN operator for multiple results

A subquery is a SELECT statement that is within another SQL statement. 
A query in parenthesis is executed first as a subquery

Deleting data:
DELETE FROM invoices
WHERE client_id = (
SELECT *
FROM clients
WHERE name = 'Myworks’)

As a best practrice should use SELECT * FROM before running UPDATE or DELETE anything

Restoring databases in MySQL Workbench:
File -> Open SQL Script -> (then execute the script to recreate all the databases)


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

MySQL Notes 7:

SELECT
  'fitting data name' AS new_header_column,
  SUM(column_a) AS total_sales,
  SUM(column_b) AS total_payments,
  SUM(column_a - column_b) AS what_we_expect
UNION

use UNION for joining multiple rows of queries

Aggregate functions are used for solving business problems - queries that summarize data

Aggregate functions only operate on non-NULL values

other aggregate functions:
MAX()
MIN()
AVG()

SUM()
: SUM can include two columns and perform subtraction, multiplication and other operations as well

COUNT(): number of entries

COUNT(*)
: to get total number of entries irrespective of value being non-null

COUNT(DISTINCT client_id) as total_records
: to count only unique values and avoid duplicates then should use DISTINCT


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

MySQL Notes 8:

GROUP BY 
: group data by 1 or more columns

GROUP BY 
  c.customer_id,
  c.first_name, 
  c.last_name

GROUP BY date, payment_method
: will combine all data from same date and payment_method into one entry

Order of clauses refresher:
SELECT -> FROM -> WHERE -> GROUP BY -> ORDER BY

When combining multiple columns using GROUP BY we get one result for each unique combination

As a rule of thumb whenever we have an aggregate function and we're grouping data, 
we should group by all the columns in the SELECT clause

HAVING
: able to filter data after our rows are grouped (WHERE is for before data is grouped)
: just like with WHERE clause we can type out one or more conditions (using AND)
: columns have to be referred to from SELECT clause

WITH ROLLUP
GROUP BY pm.name WITH ROLLUP
: powerful operation summarizing data, used with GROUP BY ... WITH ROLLUP
: only applies to columns that aggregate values (like SUM, AVG, etc.)
: this operation is only available in MySQL (not available in SQL server or Oracle)
: when you use the ROLLUP operator we can't use a column alias in the GORUP BY clause - 
in that case we should type the actual name of the column

possible to join multiple tables with more than one JOIN clause:
JOIN orders o USING (customer_id)
JOIN order_items oi USING (order_id)


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

MySQL Notes 9:

Subquery example (just using parenthesis):

SELECT
	*
FROM employees
WHERE salary > (
	SELECT
        AVG(salary) AS Average_Salary
	FROM employees
)
ORDER BY salary DESC


Example: find the clients that do not have an invoice:

SELECT *
FROM clients
WHERE client_id NOT IN (
	SELECT DISTINCT client_id
    FROM invoices
)


In the case when query is made complex using a subquery, it's better to use a JOIN - 
for better readability (and vice versa)

Example where it's cleaner to use JOIN clauses:

SELECT
	DISTINCT customer_id,
    first_name,
    last_name
FROM customers
JOIN orders USING (customer_id)
JOIN order_items USING (order_id)
WHERE product_id = 3


ALL
: return TRUE if the comparison is TRUE for ALL of the values in the column that the subquery returns
: ALL vs MAX()
: both are satisfactory ways for handling this business problem:
  Select invoices larger than all invoices of client 3

SELECT *
FROM invoices
WHERE invoice_total > ALL (
	SELECT invoice_total
    FROM invoices
    WHERE client_id = 3
)

SELECT *
FROM invoices
WHERE invoice_total > (
	SELECT MAX(invoice_total)
	FROM invoices
	WHERE client_id = 3
)


= ANY
: same as IN when using subqueries

Example: Select clients with at least 2 invoices

SELECT *
FROM clients
WHERE client_id = ANY (
	SELECT client_id
	FROM invoices
	GROUP BY client_id
	HAVING COUNT(*) >=2
)