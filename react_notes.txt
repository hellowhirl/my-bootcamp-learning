// React notes

// Each component is a piece of UI - build them separately and put together to build complex UI'separately
// React elements are just JS objects that maps to a DOM elements (just represents DOM elememnt in memory)

// Don't need to write code to query and manipulate DOM or attach event handlers to DOM elements


// Both below are similar in component based architecture;
// Angular is a complete solution framework
// Reach is simply a library that handles the View - making sure view is in sync with the state

// create-react-app
// installs Web Development Server, Webpack, Babel
// zero config setup - but possible with running command
    $ npm run eject

// JSX: JavaScript XML
// Babel converts JSX code to browswer readable JavaScript

Helpful plugins
- Prettier
- Simple React Snippets
    shortcuts like: imrc, cc

// id="root" is container for our React app

- react-scripts:

"start": "react-scripts start", // start dev server 
    $ npm start
"build": "react-scripts build", // build application for production for optimized pacckage
"test": "react-scripts test", // for running unit tests
"eject": "react-scripts eject" // eject from create-react app and customize configs for this project

- all the complex configs (babel, webpack, etc.) are hidden

*only use if you know what you're doing*
    $ npm run eject
- this will make all dependencies visible and you can also see 'config' folder


- Full-stack: JavaScript / Node + Express + MongoDB

- better to use .jsx for file names in 'components' - we get better code completion

Simple React Snippets
- imrc: import React / Component
- cc: Class Coomponent

Setting attribute:
<img src={this.state.imageUrl} alt="" />

we can't use 'class' because it's a reserved keyword in JS, so we use 'className' in JSX

refactor shortcut in VS code : CTRL + SHIFT + R

alias for npm install
    $ npm i

- when we build an application webpack will pull in files that we have specified on index.js with 'import' and put them in a final bundle


- real world applications consist of a "tree of components"

Zen coding with Emmet: create table with class "container" with <thead> enclosing <tr> enclosing 4 <td> tags
table.container>thead>tr>td*4


Correct v. Incorrect ES6 syntax:

{this.state.counters.map(c => (
    <Counter key={c.id} />
))}

{this.state.counters.map(c => {
    <Counter key={c.id} />;
})}


